// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.tencent.tars.testtars;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class LiveRoomView {

	@TarsStructProperty(order = 0, isRequire = false)
	public long age = 0L;
	@TarsStructProperty(order = 1, isRequire = false)
	public java.util.List<Student> students = null;

	public long getAge() {
		return age;
	}

	public void setAge(long age) {
		this.age = age;
	}

	public java.util.List<Student> getStudents() {
		return students;
	}

	public void setStudents(java.util.List<Student> students) {
		this.students = students;
	}

	public LiveRoomView() {
	}

	public LiveRoomView(long age, java.util.List<Student> students) {
		this.age = age;
		this.students = students;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(age);
		result = prime * result + TarsUtil.hashCode(students);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof LiveRoomView)) {
			return false;
		}
		LiveRoomView other = (LiveRoomView) obj;
		return (
			TarsUtil.equals(age, other.age) &&
			TarsUtil.equals(students, other.students) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		_os.write(age, 0);
		if (null != students) {
			_os.write(students, 1);
		}
	}

	static java.util.List<Student> cache_students;
	static { 
		cache_students = new java.util.ArrayList<Student>();
		Student var_4 = new Student();
		cache_students.add(var_4);
	}

	public void readFrom(TarsInputStream _is) {
		this.age = _is.read(age, 0, false);
		this.students = (java.util.List<Student>) _is.read(cache_students, 1, false);
	}

}
